{"version":3,"sources":["components/Setup.tsx","components/PlayerScore.tsx","App.tsx","index.tsx"],"names":["Setup","startSet","playersSet","playersCountSet","playersCount","players","Text","Container","Button","onClick","prev","range","map","el","i","Input","type","onChange","e","prevArr","Object","assign","target","value","styled","button","div","input","PlayerScore","player","index","useState","scores","scoresSet","score","scoreSet","sum","reduce","a","b","length","console","log","FlexRow","Score","SmallButton","filter","deleteScore","SubmitContainer","onSubmit","preventDefault","oldArray","Number","form","section","App","start","Row","id","_uniqueId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa2d6f51.chunk.js","sourcesContent":["import React, { FC, useRef, useState } from \"react\";\nimport range from \"lodash/range\";\nimport styled from \"styled-components\";\n\ntype Props = {\n  startSet: React.Dispatch<React.SetStateAction<boolean>>;\n  playersSet: React.Dispatch<React.SetStateAction<string[]>>;\n  playersCountSet: React.Dispatch<React.SetStateAction<number>>;\n  playersCount: number;\n  players: string[];\n};\nconst Setup: FC<Props> = ({\n  startSet,\n  playersSet,\n  playersCountSet,\n  playersCount,\n  players,\n}) => {\n  return (\n    <>\n      <Text>Ile graczy?</Text>\n      <Container>\n        {playersCount > 0 ? (\n          <Button onClick={() => playersCountSet((prev) => prev - 1)}>-</Button>\n        ) : null}\n        <Text>{playersCount}</Text>\n        <Button onClick={() => playersCountSet((prev) => prev + 1)}>+</Button>\n      </Container>\n      {range(playersCount).map((el, i) => {\n        return (\n          <Input\n            key={i}\n            type=\"text\"\n            onChange={(e) =>\n              playersSet((prevArr) => {\n                return Object.assign([], prevArr, { [el]: e.target.value });\n              })\n            }\n          />\n        );\n      })}\n      <Button onClick={() => startSet(true)}>Rozpocznij grę</Button>\n    </>\n  );\n};\n\nexport default Setup;\nexport const Button = styled.button`\n  border: none;\n  outline: none;\n  font-size: 14px;\n  line-height: 20px;\n  text-align: center;\n  cursor: pointer;\n  color: rgb(74, 74, 74);\n  font-weight: 400;\n  box-shadow: rgb(55 71 79 / 20%) 0px 0px 2px, rgb(0 0 0 / 10%) 0px 8px 12px;\n  max-width: 200px;\n  background-color: rgb(255, 255, 255);\n  border-radius: 4px;\n  padding: 14px 16px;\n  margin: 0 4px;\n`;\nexport const Text = styled.div`\n  font-size: 18px;\n  margin: 0 4px;\n  white-space: pre;\n  text-align: center;\n`;\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 20px 0;\n`;\nexport const Input = styled.input`\n  margin: 8px 0;\n  border: none;\n  outline: none;\n  box-shadow: rgb(55 71 79 / 20%) 0px 0px 2px, rgb(0 0 0 / 10%) 0px 8px 12px;\n  font-size: 20px;\n  padding: 4px;\n`;\n","import React, { FC, useState } from 'react';\nimport styled from 'styled-components';\nimport { Text } from './Setup';\n\ntype Props = {\n  player: string;\n  playersCount: number;\n  index: number;\n};\nconst PlayerScore: FC<Props> = ({ player, playersCount, index }) => {\n  const [scores, scoresSet] = useState<number[]>([]);\n  const [score, scoreSet] = useState(0);\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    scoresSet((oldArray) => [...oldArray, score]);\n    scoreSet(0);\n  };\n  const sum = scores.reduce((a, b) => a + b, 0);\n  const deleteScore = (i: number) => {\n    scoresSet((prev) => prev.filter((el, index) => i !== index));\n  };\n  return (\n    <Container>\n      <Text>\n        <b>\n          {player}\n          {scores.length % playersCount === index ? '*' : null}\n          {console.log('1: ', scores.length % playersCount)}\n          {console.log('2: ', index)}\n        </b>\n      </Text>\n      <ul>\n        {scores.map((el, i) => {\n          return (\n            <FlexRow playersCount={playersCount}>\n              <Score>{el}</Score>\n              <SmallButton onClick={() => deleteScore(i)}>Usuń</SmallButton>\n            </FlexRow>\n          );\n        })}\n      </ul>\n      <Text>Suma: {sum}</Text>\n      <SubmitContainer onSubmit={handleSubmit}>\n        <Input\n          type='number'\n          onChange={(e) => scoreSet(Number(e.target.value))}\n          value={score}\n        />\n        <SmallButton type='submit'>+</SmallButton>\n      </SubmitContainer>\n    </Container>\n  );\n};\n\nexport default PlayerScore;\nconst Input = styled.input`\n  max-width: 38px;\n  border: none;\n  outline: none;\n  box-shadow: rgb(55 71 79 / 20%) 0px 0px 2px, rgb(0 0 0 / 10%) 0px 8px 12px;\n  font-size: 20px;\n  padding: 2px;\n  margin-right: 8px;\n`;\nconst FlexRow = styled.div<{ playersCount: number }>`\n  display: flex;\n  align-items: center;\n  margin: 4px 0;\n  justify-content: center;\n  /* &:nth-child(${({ playersCount }) => playersCount}n+1) {\n    background-color: rgba(0, 0, 0, 0.05);\n  } */\n`;\nconst Score = styled.div`\n  margin-right: 4px;\n  font-size: 20px;\n`;\nconst SmallButton = styled.button`\n  border: none;\n  outline: none;\n  font-size: 14px;\n  line-height: 20px;\n  text-align: center;\n  cursor: pointer;\n  color: rgb(74, 74, 74);\n  font-weight: 400;\n  box-shadow: rgb(55 71 79 / 20%) 0px 0px 2px, rgb(0 0 0 / 10%) 0px 8px 12px;\n  max-width: 200px;\n  background-color: rgb(255, 255, 255);\n  border-radius: 4px;\n  padding: 4px;\n`;\nconst SubmitContainer = styled.form`\n  display: flex;\n  align-items: center;\n  margin-top: 8px;\n`;\n\nconst Container = styled.section`\n  margin: 0 4px;\n`;\n","import { useState } from 'react';\nimport styled from 'styled-components';\nimport Setup from './components/Setup';\nimport _uniqueId from 'lodash/uniqueId';\nimport PlayerScore from './components/PlayerScore';\n\nfunction App() {\n  const [start, startSet] = useState(false);\n  const [players, playersSet] = useState<string[]>([]);\n  const [playersCount, playersCountSet] = useState(0);\n\n  return (\n    <Container>\n      {!start && (\n        <Setup\n          startSet={startSet}\n          playersSet={playersSet}\n          players={players}\n          playersCountSet={playersCountSet}\n          playersCount={playersCount}\n        />\n      )}\n      {start && (\n        <Row>\n          {players.map((player, index) => {\n            const id = _uniqueId('prefix-');\n\n            return (\n              <div key={id}>\n                <PlayerScore\n                  player={player}\n                  playersCount={playersCount}\n                  index={index}\n                />\n              </div>\n            );\n          })}\n        </Row>\n      )}\n    </Container>\n  );\n}\n\nexport default App;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin-top: 24px;\n`;\nconst Row = styled.div`\n  display: flex;\n  align-items: center;\n`;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}